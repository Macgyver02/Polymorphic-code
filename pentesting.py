import random
import string
import base64
import hashlib
import time

def generate_key(length=16):
    """Generate a random XOR key."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def xor_encrypt(data, key):
    """Encrypt/Decrypt data using XOR."""
    return ''.join(chr(ord(c) ^ ord(key[i % len(key)])) for i, c in enumerate(data))

def generate_payload():
    """Generate a dynamic payload for penetration testing simulation."""
    commands = ["Scanning Network...", "Identifying Open Ports...", "Testing Vulnerabilities...", "Simulating Attack Scenario..."]
    return random.choice(commands)

def polymorphic_code():
    """Generate polymorphic variant of the script dynamically."""
    new_key = generate_key()
    encoded_key = base64.b64encode(new_key.encode()).decode()
    var_name = ''.join(random.choices(string.ascii_lowercase, k=6))
    payload = generate_payload()
    obfuscated_code = f"""
import random
import string
import base64
import time

def xor_encrypt(data, key):
    return ''.join(chr(ord(c) ^ ord(key[i % len(key)])) for i, c in enumerate(data))

data = "{payload}"
{var_name} = base64.b64decode("{encoded_key}").decode()
cipher = xor_encrypt(data, {var_name})

print("Executing Polymorphic Penetration Test...")
time.sleep(2)
print("Encrypted Payload:", cipher)
time.sleep(1)
print("Decrypted Payload:", xor_encrypt(cipher, {var_name}))
"""
    return obfuscated_code

if __name__ == "__main__":
    poly_code = polymorphic_code()
    print("Generated Polymorphic Code:\n")
    print(poly_code)
    exec(poly_code)
